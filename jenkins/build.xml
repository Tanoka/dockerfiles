<?xml version="1.0" encoding="UTF-8"?>
<project name="name-of-project" default="full-build" basedir=".">

<property name="basedirconf" value="."/>
<!-- jobName is an ant parameter -->
<property name="pathBase" value="./workspace/${jobName}" />
<property name="resultdir" value="${pathBase}/build"/>
<property name="source" value="${pathBase}/src/" />
<property name="composer" value="/home/jenkins/vendor/bin"/>

<property name="pdepend" value="${composer}/pdepend"/>
<property name="phpcpd"  value="${composer}/phpcpd"/>
<property name="phpcs"   value="${composer}/phpcs"/>
<property name="phploc"  value="${composer}/phploc"/>
<property name="phpmd"   value="${composer}/phpmd"/>
<property name="phpunit" value="${pathBase}/bin/phpunit"/>

<!-- No check failure right now 
 <target name="full-build"
         depends="prepare,static-analysis,phpunit,-check-failure"
         description="Performs static analysis, runs the tests, and generates project documentation"/>
-->
 <target name="full-build"
         depends="prepare,static-analysis,phpunit"
         description="Performs static analysis, runs the tests, and generates project documentation"/>

 <target name="full-build-parallel"
         depends="prepare,static-analysis-parallel,phpunit"
         description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

 <target name="quick-build"
         depends="prepare,lint,phpunit-no-coverage"
         description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

 <target name="static-analysis"
         depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
         description="Performs static analysis" />

 <!-- Adjust the threadCount attribute's value to the number of CPUs -->
 <target name="static-analysis-parallel"
         description="Performs static analysis (executing the tools in parallel)">
  <parallel threadCount="2">
   <sequential>
    <antcall target="pdepend"/>
    <antcall target="phpmd-ci"/>
   </sequential>
   <antcall target="lint"/>
   <antcall target="phpcpd-ci"/>
   <antcall target="phpcs-ci"/>
   <antcall target="phploc-ci"/>
  </parallel>
 </target>

 <target name="clean"
         unless="clean.done"
         description="Cleanup build artifacts">
  <delete dir="${resultdir}/api"/>
  <delete dir="${resultdir}/coverage"/>
  <delete dir="${resultdir}/logs"/>
  <delete dir="${resultdir}/pdepend"/>
  <property name="clean.done" value="true"/>
 </target>

 <target name="prepare"
         unless="prepare.done"
         depends="clean"
         description="Prepare for build">
  <mkdir dir="${resultdir}/api"/>
  <mkdir dir="${resultdir}/coverage"/>
  <mkdir dir="${resultdir}/logs"/>
  <mkdir dir="${resultdir}/pdepend"/>
  <property name="prepare.done" value="true"/>
 </target>

 <target name="lint"
         unless="lint.done"
         description="Perform syntax check of sourcecode files">
  <apply executable="php" taskname="lint">
   <arg value="-l" />
   <fileset dir="${source}">
    <include name="**/*.php" />
    <modified />
   </fileset>

  </apply>

  <property name="lint.done" value="true"/>
 </target>

 <target name="phploc"
         unless="phploc.done"
         description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
  <exec executable="${phploc}" taskname="phploc">
   <arg value="--count-tests" />
   <arg path="${source}" />
  </exec>

  <property name="phploc.done" value="true"/>
 </target>

 <target name="phploc-ci"
         unless="phploc.done"
         depends="prepare"
         description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phploc}" taskname="phploc">
   <arg value="--count-tests" />
   <arg value="--log-csv" />
   <arg path="${resultdir}/logs/phploc.csv" />
   <arg value="--log-xml" />
   <arg path="${resultdir}/logs/phploc.xml" />
   <arg path="${source}" />
  </exec>

  <property name="phploc.done" value="true"/>
 </target>

 <target name="pdepend"
         unless="pdepend.done"
         depends="prepare"
         description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${pdepend}" taskname="pdepend">
   <arg value="--jdepend-xml=${resultdir}/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${resultdir}/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${resultdir}/pdepend/overview-pyramid.svg" />
   <arg path="${source}" />
  </exec>

  <property name="pdepend.done" value="true"/>
 </target>

 <target name="phpmd"
         unless="phpmd.done"
         description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${phpmd}" taskname="phpmd">
   <arg path="${source}" />
   <arg value="text" />
   <arg path="${basedirconf}/phpmd.xml" />
  </exec>

  <property name="phpmd.done" value="true"/>
 </target>

 <target name="phpmd-ci"
         unless="phpmd.done"
         depends="prepare"
         description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phpmd}" taskname="phpmd">
   <arg path="${source}" />
   <arg value="xml" />
   <arg path="${basedirconf}/phpmd.xml" />
   <arg value="--reportfile" />
   <arg path="${resultdir}/logs/pmd.xml" />
  </exec>

  <property name="phpmd.done" value="true"/>
 </target>

 <target name="phpcs"
         unless="phpcs.done"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${phpcs}" taskname="phpcs">
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg value="--ignore=autoload.php,*/Tests/*" />
   <arg path="${source}" />
  </exec>

  <property name="phpcs.done" value="true"/>
 </target>

 <target name="phpcs-ci"
         unless="phpcs.done"
         depends="prepare"
         description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${resultdir}/logs/checkstyle.xml" />
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg value="--ignore=autoload.php,*/Tests/*" />
   <arg path="${source}" />
  </exec>

  <property name="phpcs.done" value="true"/>
 </target>

 <target name="phpcpd"
         unless="phpcpd.done"
         description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${phpcpd}" taskname="phpcpd">
   <arg value="--exclude"/>
   <arg value="Tests"/>
   <arg path="${source}" />
  </exec>

  <property name="phpcpd.done" value="true"/>
 </target>

 <target name="phpcpd-ci"
         unless="phpcpd.done"
         depends="prepare"
         description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phpcpd}" taskname="phpcpd">
   <arg value="--log-pmd" />
   <arg path="${resultdir}/logs/pmd-cpd.xml" />
   <arg value="--exclude"/>
   <arg value="Tests"/>
   <arg path="${source}" />
  </exec>

  <property name="phpcpd.done" value="true"/>
 </target>

 <target name="phpunit"
         unless="phpunit.done"
         depends="prepare"
         description="Run unit tests with PHPUnit">
  <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
   <arg value="--configuration"/>
   <arg path="${basedirconf}/phpunit.xml"/>
  </exec>

  <property name="phpunit.done" value="true"/>
 </target>

 <target name="phpunit-no-coverage"
         unless="phpunit.done"
         depends="prepare"
         description="Run unit tests with PHPUnit (without generating code coverage reports)">
  <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
   <arg value="--configuration"/>
   <arg path="${basedirconf}/phpunit.xml"/>
   <arg value="--no-coverage"/>
  </exec>

  <property name="phpunit.done" value="true"/>
 </target>

 <target name="-check-failure">
  <fail message="PHPUnit did not finish successfully">
   <condition>
    <not>
     <equals arg1="${result.phpunit}" arg2="0"/>
    </not>
   </condition>
  </fail>
 </target>
</project>

